library(readr)
puredata <- read_csv("puredata.CSV")
library(readr)
puredata <- read_csv("puredata.CSV")
View(puredata)
y_var <- "strength0.2"
# 载入R包
library(nnet)
library(neuralnet)
library(ggplot2)
# 数据预处理
data <- read.csv("puredata.csv")
# 处理缺失值
data[is.na(data)] <- median(data, na.rm = TRUE)
# 载入R包
library(nnet)
library(neuralnet)
library(ggplot2)
# 数据预处理
data <- read.csv("puredata.csv")
# 处理缺失值
data[is.na(data)] <- median(data, na.rm = TRUE)
# 载入R包
library(nnet)
library(neuralnet)
library(ggplot2)
# 数据预处理
data <- read.csv("puredata.csv")
# 处理缺失值
#[is.na(data)] <- median(data, na.rm = TRUE)
# 选择要分析的因素与结果
x_vars <- c("grong", "gurongtime", "shixiao wendu", "shixiao time")
y_var <- "strength0.2"
# 构建并训练模型
model <- neuralnet(as.formula(paste(y_var, "~", paste(x_vars, collapse = " + "))),
data = data,
hidden = c(8,10), dropout = 0.2, decay = 0.05,
act.fct = "tanh", optimizer = "adam", lifesign = "minimal")
# 载入R包
library(nnet)
library(neuralnet)
library(ggplot2)
# 数据预处理
data <- read.csv("puredata.csv")
# 处理缺失值
data[, x_vars] <- scale(data[, x_vars], center = TRUE, scale = TRUE)
# 载入R包
library(nnet)
library(neuralnet)
library(ggplot2)
# 数据预处理
data <- read.csv("puredata.csv")
# 处理缺失值
#data[, x_vars] <- scale(data[, x_vars], center = TRUE, scale = TRUE)
[is.na(data)] <- median(data, na.rm = TRUE)
# 载入R包
library(nnet)
library(neuralnet)
library(ggplot2)
# 数据预处理
data <- read.csv("puredata.csv")
# 处理缺失值
#data[, x_vars] <- scale(data[, x_vars], center = TRUE, scale = TRUE)
#[is.na(data)] <- median(data, na.rm = TRUE)
# 选择要分析的因素与结果
x_vars <- c("grong", "gurongtime", "shixiao wendu", "shixiao time")
y_var <- "strength0.2"
# 构建并训练模型
model <- neuralnet(as.formula(paste(y_var, "~", paste(x_vars, collapse = " + "))),
data = data,
hidden = c(8,10), dropout = 0.2, decay = 0.05,
act.fct = "tanh", optimizer = "adam", lifesign = "minimal")
# 读取数据文件
data <- read.csv("puredata.csv", header = TRUE)
# 查看数据摘要
summary(data)
# 加载神经网络包
library(neuralnet)
# 将数据分为训练集和测试集
set.seed(123)
train_index <- sample(1:nrow(data), size = 0.7*nrow(data), replace = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# 创建神经网络模型
model <- neuralnet(strength ~ grong + gurongtime + shixiao.wendu + shixiao.time, train_data, hidden = 3)
View(data)
View(data)
View(data)
View(data)
View(data)
# 读取数据文件
data <- read.csv("puredata.csv", header = TRUE)
# 查看数据摘要
summary(data)
# 加载神经网络包
library(neuralnet)
# 将数据标准化
data_scaled <- as.data.frame(scale(data))
# 将数据标准化
data_scaled <- as.data.frame(scale(data))
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
{
fileExt <- function(x) {
db <- grepl("\\.[^.]+\\.(gz|bz2|xz)$", x)
ans <- sub(".*\\.", "", x)
ans[db] <- sub(".*\\.([^.]+\\.)(gz|bz2|xz)$", "\\1\\2",
x[db])
ans
}
my_read_table <- function(...) {
lcc <- Sys.getlocale("LC_COLLATE")
on.exit(Sys.setlocale("LC_COLLATE", lcc))
Sys.setlocale("LC_COLLATE", "C")
read.table(...)
}
stopifnot(is.character(list))
names <- c(as.character(substitute(list(...))[-1L]), list)
if (!is.null(package)) {
if (!is.character(package))
stop("'package' must be a character vector or NULL")
}
paths <- find.package(package, lib.loc, verbose = verbose)
if (is.null(lib.loc))
paths <- c(path.package(package, TRUE), if (!length(package)) getwd(),
paths)
paths <- unique(normalizePath(paths[file.exists(paths)]))
paths <- paths[dir.exists(file.path(paths, "data"))]
dataExts <- tools:::.make_file_exts("data")
if (length(names) == 0L) {
db <- matrix(character(), nrow = 0L, ncol = 4L)
for (path in paths) {
entries <- NULL
packageName <- if (file_test("-f", file.path(path,
"DESCRIPTION")))
basename(path)
else "."
if (file_test("-f", INDEX <- file.path(path, "Meta",
"data.rds"))) {
entries <- readRDS(INDEX)
}
else {
dataDir <- file.path(path, "data")
entries <- tools::list_files_with_type(dataDir,
"data")
if (length(entries)) {
entries <- unique(tools::file_path_sans_ext(basename(entries)))
entries <- cbind(entries, "")
}
}
if (NROW(entries)) {
if (is.matrix(entries) && ncol(entries) == 2L)
db <- rbind(db, cbind(packageName, dirname(path),
entries))
else warning(gettextf("data index for package %s is invalid and will be ignored",
sQuote(packageName)), domain = NA, call. = FALSE)
}
}
colnames(db) <- c("Package", "LibPath", "Item", "Title")
footer <- if (missing(package))
paste0("Use ", sQuote(paste("data(package =", ".packages(all.available = TRUE))")),
"\n", "to list the data sets in all *available* packages.")
else NULL
y <- list(title = "Data sets", header = NULL, results = db,
footer = footer)
class(y) <- "packageIQR"
return(y)
}
paths <- file.path(paths, "data")
for (name in names) {
found <- FALSE
for (p in paths) {
tmp_env <- if (overwrite)
envir
else new.env()
if (file_test("-f", file.path(p, "Rdata.rds"))) {
rds <- readRDS(file.path(p, "Rdata.rds"))
if (name %in% names(rds)) {
found <- TRUE
if (verbose)
message(sprintf("name=%s:\t found in Rdata.rds",
name), domain = NA)
thispkg <- sub(".*/([^/]*)/data$", "\\1",
p)
thispkg <- sub("_.*$", "", thispkg)
thispkg <- paste0("package:", thispkg)
objs <- rds[[name]]
lazyLoad(file.path(p, "Rdata"), envir = tmp_env,
filter = function(x) x %in% objs)
break
}
else if (verbose)
message(sprintf("name=%s:\t NOT found in names() of Rdata.rds, i.e.,\n\t%s\n",
name, paste(names(rds), collapse = ",")),
domain = NA)
}
if (file_test("-f", file.path(p, "Rdata.zip"))) {
warning("zipped data found for package ", sQuote(basename(dirname(p))),
".\nThat is defunct, so please re-install the package.",
domain = NA)
if (file_test("-f", fp <- file.path(p, "filelist")))
files <- file.path(p, scan(fp, what = "",
quiet = TRUE))
else {
warning(gettextf("file 'filelist' is missing for directory %s",
sQuote(p)), domain = NA)
next
}
}
else {
files <- list.files(p, full.names = TRUE)
}
files <- files[grep(name, files, fixed = TRUE)]
if (length(files) > 1L) {
o <- match(fileExt(files), dataExts, nomatch = 100L)
paths0 <- dirname(files)
paths0 <- factor(paths0, levels = unique(paths0))
files <- files[order(paths0, o)]
}
if (length(files)) {
for (file in files) {
if (verbose)
message("name=", name, ":\t file= ...",
.Platform$file.sep, basename(file), "::\t",
appendLF = FALSE, domain = NA)
ext <- fileExt(file)
if (basename(file) != paste0(name, ".", ext))
found <- FALSE
else {
found <- TRUE
zfile <- file
zipname <- file.path(dirname(file), "Rdata.zip")
if (file.exists(zipname)) {
Rdatadir <- tempfile("Rdata")
dir.create(Rdatadir, showWarnings = FALSE)
topic <- basename(file)
rc <- .External(C_unzip, zipname, topic,
Rdatadir, FALSE, TRUE, FALSE, FALSE)
if (rc == 0L)
zfile <- file.path(Rdatadir, topic)
}
if (zfile != file)
on.exit(unlink(zfile))
switch(ext, R = , r = {
library("utils")
sys.source(zfile, chdir = TRUE, envir = tmp_env)
}, RData = , rdata = , rda = load(zfile,
envir = tmp_env), TXT = , txt = , tab = ,
tab.gz = , tab.bz2 = , tab.xz = , txt.gz = ,
txt.bz2 = , txt.xz = assign(name, my_read_table(zfile,
header = TRUE, as.is = FALSE), envir = tmp_env),
CSV = , csv = , csv.gz = , csv.bz2 = ,
csv.xz = assign(name, my_read_table(zfile,
header = TRUE, sep = ";", as.is = FALSE),
envir = tmp_env), found <- FALSE)
}
if (found)
break
}
if (verbose)
message(if (!found)
"*NOT* ", "found", domain = NA)
}
if (found)
break
}
if (!found) {
warning(gettextf("data set %s not found", sQuote(name)),
domain = NA)
}
else if (!overwrite) {
for (o in ls(envir = tmp_env, all.names = TRUE)) {
if (exists(o, envir = envir, inherits = FALSE))
warning(gettextf("an object named %s already exists and will not be overwritten",
sQuote(o)))
else assign(o, get(o, envir = tmp_env, inherits = FALSE),
envir = envir)
}
rm(tmp_env)
}
}
invisible(names)
}
# 读取数据文件
data <- read.csv("puredata.csv", header = TRUE)
# 查看数据摘要
summary(data)
# 加载神经网络包
library(neuralnet)
# 将数据标准化
data_scaled <- as.data.frame(scale(data))
View(data)
View(data)
library(readr)
puredata <- read_csv("puredata.CSV")
View(puredata)
library(readr)
puredata <- read_csv("puredata.CSV")
View(puredata)
pmar <- par(mar = c(5.1, 4.1, 4.1, 6.1)) #改版画布版式大小
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width, z = Petal.Length,
pch = 21, cex = 1.5,col="black",bg="#F57446",
xlab = "x",
ylab = "y",
zlab = "z1",
ticktype = "detailed",bty = "f",box = TRUE,
theta = 60, phi = 20, d=3,
colkey = FALSE)
)
install.packages("scatter3D")
install.packages("plot3D")
library(plot3D)
detach("package:plot3D", unload = TRUE)
pmar <- par(mar = c(5.1, 4.1, 4.1, 6.1)) #改版画布版式大小
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width, z = Petal.Length,
pch = 21, cex = 1.5,col="black",bg="#F57446",
xlab = "x",
ylab = "y",
zlab = "z1",
ticktype = "detailed",bty = "f",box = TRUE,
theta = 60, phi = 20, d=3,
colkey = FALSE)
)
install.packages("scatterplot3d")
pmar <- par(mar = c(5.1, 4.1, 4.1, 6.1)) #改版画布版式大小
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width, z = Petal.Length,
pch = 21, cex = 1.5,col="black",bg="#F57446",
xlab = "x",
ylab = "y",
zlab = "z1",
ticktype = "detailed",bty = "f",box = TRUE,
theta = 60, phi = 20, d=3,
colkey = FALSE)
)
library(misc3d)
library(plot3D)
library(scatterplot3d)
pmar <- par(mar = c(5.1, 4.1, 4.1, 6.1)) #改版画布版式大小
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width, z = Petal.Length,
pch = 21, cex = 1.5,col="black",bg="#F57446",
xlab = "x",
ylab = "y",
zlab = "z1",
ticktype = "detailed",bty = "f",box = TRUE,
theta = 60, phi = 20, d=3,
colkey = FALSE)
)
pmar <- par(mar = c(5.1, 4.1, 4.1, 6.1)) #改版画布版式大小
with(iris, scatter3D(x = x, y = y, z = zb,
pch = 21, cex = 1.5,col="black",bg="#F57446",
xlab = "x",
ylab = "y",
zlab = "z1",
ticktype = "detailed",bty = "f",box = TRUE,
theta = 60, phi = 20, d=3,
colkey = FALSE)
)
pmar <- par(mar = c(5.1, 4.1, 4.1, 6.1)) #改版画布版式大小
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width, z = Petal.Length,
pch = 21, cex = 1.5,col="black",bg="#F57446",
xlab = "x",
ylab = "y",
zlab = "zb",
ticktype = "detailed",bty = "f",box = TRUE,
theta = 60, phi = 20, d=3,
colkey = FALSE)
)
pmar <- par(mar = c(5.1, 4.1, 4.1, 6.1)) #改版画布版式大小
with(iris, scatter3D(x = Sepal.Length, y = Sepal.Width, z = Petal.Length,
pch = 21, cex = 1.5,col="black",bg="#F57446",
xlab = "x",
ylab = "y",
zlab = "zb",
ticktype = "detailed",bty = "f",box = TRUE,
theta = 60, phi = 20, d=3,
colkey = FALSE)
)
